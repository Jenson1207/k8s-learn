---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: kube-system
  labels:
    k8s-app: filebeat
data:
  filebeat.yml: |-
    # 将filebeat input分开配置，支持热加载
    filebeat.config.inputs:
      enabled: true
      # path.config = filebeat命令所在路径
      path: ${path.config}/inputs.d/filebeat-input-*.yml
      reload.enabled: true
      reload.period: 10s    
    # filebeat module配置
    filebeat.config.modules:
      enabled: true
      path: ${path.config}/modules.d/filebeat-module-*.yml
      reload.enabled: true
      reload.period: 10s
    processors:
    - add_kubernetes_metadata:
        # 本地测试用
        when.not.contains:
          fields.namespace: "kube-system"
        default_indexers.enabled: true
        default_matchers.enabled: true
        host: ${NODE_NAME}
        matchers:
        - logs_path:
            logs_path: "/var/log/containers/"
    - script:
        lang: javascript
        id: format_data
        tag: enable
        source: >
            function process(event) {
                // 获取时间戳
                var timestamp = event.Get("@timestamp");

                // 将时间戳时间赋值给ts字段
                event.Put("ts", timestamp);

                // 将message字段改名为content字段
                event.Rename("message", "content");
            }
    - script:
        lang: javascript
        id: format_meta
        tag: enable
        source: >
            function process(event) {
                // 获取k8s字段信息
                var k8s = event.Get("kubernetes");
                // 获取fileds字段信息
                var fields = event.Get("fields");
                
                // 用于本地测试用
                if (k8s == null) {
                  k8s = {
                    pod: {name: fields.pod_name},
                    namespace: fields.namespace
                  }
                }

                // topic 做调整,防止出现 A/A-B 应用日志放一起了,但是会导致一个问题开启A应用日志的同时，会导致A-B日志输出到Kafka中(设置消息过期？)
                if ("deployment" in k8s) {
                    var topic = "paas_" + k8s.namespace + "_" + k8s.deployment.name;
                    event.Put("fields.topicName",topic);
                } else if ("statefulset" in k8s) {
                    var topic = "paas_" + k8s.namespace + "_" + k8s.statefulset.name;
                    event.Put("fields.topicName",topic);
                } else if ("daemonset" in k8s) {
                    var topic = "paas_" + k8s.namespace + "_" + k8s.daemonset.name;
                    event.Put("fields.topicName",topic);
                }

                // 构建meta所需数据,这里放业务所需信息
                var metaObj = {
                    iid: k8s.pod.name,
                    // application code
                    lsc: fields.sourceCode,
                    lst: "paas",
                }
                event.Put("meta", metaObj);
            }
    # 将filebeat自身日志丢了
    - drop_event:
        when:
          or:
          - contains:
              kubernetes.pod.name: "filebeat"
          - regexp:
              kubernetes.pod.name: "^.*filebeat.*$"
    - drop_fields:
        fields:
          # 当前运行节点信息
          - host
          # tags 字段
          - tags
          # ecs信息
          - ecs
          # filebeat 收集日志名称与偏移量
          - log
          - prospector
          # agent 相关信息
          - agent
          # input 输入类型
          - input
          - beat
          - offset
          # 流
          - stream
          # container信息
          - container
          - kubernetes
          # k8s集群相关信息
          - orchestrator
        ignore_missing: true
    #output.console:
    #  codec.json:
    #    pretty: true
    #    escape_html: false
    output.kafka:
      enabled: "true" 
      hosts: ["192.168.0.10:39094"]
      topic: '%{[fields.topicName]}'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-modules
  namespace: kube-system
  labels:
    k8s-app: filebeat
data:
  filebeat-module-nginx.yml: |
  #  - module: nginx
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-inputs
  namespace: kube-system
  labels:
    k8s-app: filebeat
data:
  filebeat-input-redis.yml: |-
    - type: container
      paths:
      #- /var/log/containers/redis*.log
      - /var/log/containers/redis-*_logging_*.log
      fields:
        topicName: paas_logging_redis
        sourceType: paas
        sourceCode: logging_redis
  filebeat-input-kube-apiserver.yml: |-
    - type: log
      paths:
      - /var/log/kubernetes/kube-apiserver/kube-apiserver*
      fields:
        topicName: paas_kube-system_kube-apiserver
        sourceType: paas
        sourceCode: kube-system_kube-apiserver
        pod_name: kube-apiserver
        namespace: "kube-system"
      multiline:
        type: pattern
        pattern: '^\w\d{4}' # 匹配I0112
        negate: true        # 取反
        match: after
  filebeat-input-kube-controller-manager.yml: |-
    - type: log
      paths:
      - /var/log/kubernetes/kube-controller-manager/kube-controller-manager*
      fields:
        topicName: paas_kube-system_kube-controller-manager
        sourceType: paas
        sourceCode: kube-system_kube-controller-manager
        pod_name: kube-controller-manager
        namespace: "kube-system"
      parsers:
      - multiline:
          type: pattern
          pattern: '^\w\d{4}'               # 匹配W0106
          negate: true                      # 取反
          match: after
  filebeat-input-kube-scheduler.yml: |-
    - type: log
      paths:
      - /var/log/kubernetes/kube-scheduler/kube-scheduler*
      fields:
        topicName: paas_kube-system_kube-scheduler
        sourceType: paas
        sourceCode: kube-system_kube-scheduler
        pod_name: kube-scheduler
        namespace: "kube-system"
      parsers:
      - multiline:
          type: pattern
          pattern: '^\w\d{4}'               # 匹配W0106
          negate: true                      # 取反
          match: after
  filebeat-input-kube-etcd.yml: |-
    - type: log
      paths:
      - /var/log/containers/etcd*.log
      fields:
        topicName: paas_kube-system_kube-etcd
        sourceType: paas
        sourceCode: kube-system_kube-etcd
        pod_name: kube-scheduler
        namespace: "kube-system"
      parsers:
      - multiline:
          type: pattern
          pattern: '^\d{4}-\d{1,2}-\d{1,2}' # 匹配2023-01-12
          negate: true                      # 取反
          match: after
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: kube-system
  labels:
    k8s-app: filebeat
spec:
  selector:
    matchLabels:
      k8s-app: filebeat
  template:
    metadata:
      labels:
        k8s-app: filebeat
    spec:
      serviceAccountName: filebeat
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: filebeat
        image: elastic/filebeat:7.17.8
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
          # If using Red Hat OpenShift uncomment this:
          #privileged: true
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: inputs-config
          readOnly: true
          mountPath: /usr/share/filebeat/inputs.d
        - name: modules-config
          readOnly: true
          mountPath: /usr/share/filebeat/modules.d
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
      volumes:
      - name: config
        configMap:
          defaultMode: 0640
          name: filebeat-config
      - name: inputs-config
        configMap:
          defaultMode: 0640
          name: filebeat-inputs
      - name: modules-config
        configMap:
          defaultMode: 0640
          name: filebeat-modules
      - name: varlibdockercontainers
        hostPath:
          path: /var/log/containers
      - name: varlog
        hostPath:
          path: /var/log
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          # When filebeat runs as non-root user, this directory needs to be writable by group (g+w).
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: filebeat
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: filebeat
    namespace: kube-system
roleRef:
  kind: Role
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: filebeat-kubeadm-config
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: filebeat
    namespace: kube-system
roleRef:
  kind: Role
  name: filebeat-kubeadm-config
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: filebeat
  labels:
    k8s-app: filebeat
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - pods
  - nodes
  verbs:
  - get
  - watch
  - list
- apiGroups: ["apps"]
  resources:
    - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources:
    - jobs
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: filebeat
  # should be the namespace where filebeat is running
  namespace: kube-system
  labels:
    k8s-app: filebeat
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: filebeat-kubeadm-config
  namespace: kube-system
  labels:
    k8s-app: filebeat
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    resourceNames:
      - kubeadm-config
    verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: kube-system
  labels:
    k8s-app: filebeat
---

#    filebeat.inputs:
#    - type: container
#      paths:
#      - /var/log/containers/ingress-nginx-*.log
#      processors:
#      - add_kubernetes_metadata:
#          host: ${NODE_NAME}
#          add_resource_metadata:
#            namespace:
#              include_labels: ["kubernetes.io/metadata.name"]
#              labels.dedot: true
#              annotations.dedot: true
#            node: 
#              include_labels: ["kubernetes.io/hostname"]
#              include_annotations: ["flannel.alpha.coreos.com/backend-type"]
#            deployment: false
#            cronjob: false
#          indexers:
#          - pod_name:
#          matchers:
#          - logs_path:
#              logs_path: "/var/log/containers/"
#            resource_type: "container"
